// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleFinder;

#nullable disable

namespace SimpleFinder.Migrations
{
    [DbContext(typeof(SimpleFinderDbContext))]
    [Migration("20221031095840_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleFinder.Features.Files.FileNode", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("statement_timestamp()");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_type_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("statement_timestamp()");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Type");

                    b.HasIndex(new[] { "Title", "Type" }, "file_nodes_title_file_type_name_uindex")
                        .IsUnique()
                        .HasFilter("(parent_id IS NULL)");

                    b.HasIndex(new[] { "Title", "ParentId", "Type" }, "file_nodes_title_parent_id_file_type_name_uindex")
                        .IsUnique()
                        .HasFilter("(parent_id IS NOT NULL)");

                    b.ToTable("file_nodes", (string)null);
                });

            modelBuilder.Entity("SimpleFinder.Features.Files.FileType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("statement_timestamp()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("statement_timestamp()");

                    b.HasKey("Name")
                        .HasName("file_types_pkey");

                    b.ToTable("file_types", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Folder",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Representing a folder / directory",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "Video",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Representing a video file",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SimpleFinder.Features.Files.FileNode", b =>
                {
                    b.HasOne("SimpleFinder.Features.Files.FileNode", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("file_nodes_file_nodes_id_fk");

                    b.HasOne("SimpleFinder.Features.Files.FileType", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("file_nodes_file_types_name_fk");

                    b.Navigation("Parent");
                });
#pragma warning restore 612, 618
        }
    }
}
